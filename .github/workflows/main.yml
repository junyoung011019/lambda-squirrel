# 워크플로우의 이름
name: Deploy to Amazon ECS

# 언제 이 워크플로우를 실행할지 정의
on:
  push:
    branches:
      - main # main 브랜치에 push될 때만 실행

# 워크플로우 전체에서 사용할 환경 변수
env:
  # 서비스별 ECR 리포지토리 이름
  ECR_REPOSITORY_WORD_SERVICE: word-service
  #ECR_REPOSITORY_USER_SERVICE: user-service
  
  # ECS 관련 정보
  ECS_CLUSTER_NAME: lambda-squirrel-cluster # 본인의 ECS 클러스터 이름
  ECS_SERVICE_NAME: lambda-squirrel-service # 본인의 ECS 서비스 이름
  ECS_TASK_DEFINITION: lambda-squirrel-dev-task # 본인의 ECS 작업 정의 이름 (JSON 파일명)
  CONTAINER_NAME: word-service # 작업 정의 안의 컨테이너 이름

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    # GitHub Actions 워크플로우에 필요한 권한 설정
    permissions:
      id-token: write
      contents: read

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정 (OIDC 방식)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }} # GitHub Secret에서 IAM 역할 불러오기
          aws-region: ${{ secrets.AWS_REGION }} # GitHub Secret에서 리전 불러오기

      # 3. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. 이미지 태그 생성 (Git 커밋 해시 사용)
      - name: Generate image tag
        id: image-tag
        run: echo "TAG=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and push word-service image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WORD_SERVICE:$TAG -f word-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WORD_SERVICE:$TAG
      
    
      # 6. ECS 작업 정의(Task Definition)에 새 이미지 버전 반영
      - name: Render Amazon ECS task definition
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}.json # 기존 작업 정의 파일
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_WORD_SERVICE }}:${{ env.TAG }}

      # 7. Amazon ECS에 새 작업 정의 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true # 배포가 안정될 때까지 기다림